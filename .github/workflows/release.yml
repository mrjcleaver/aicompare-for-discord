name: Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-release validation
  pre-release-tests:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: aicompare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run full test suite
        run: |
          npm run test:unit
          npm run test:integration
        env:
          NODE_ENV: test
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: aicompare_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: postgres
          TEST_REDIS_URL: redis://localhost:6379/15
      
      - name: Build applications
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Run E2E tests
        run: npx playwright test
        env:
          NODE_ENV: test
          E2E_BASE_URL: http://localhost:3000

  # Build and push Docker images
  build-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: pre-release-tests
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    strategy:
      matrix:
        service: [discord-bot, api-server, web-dashboard]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./packages/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}
      
      - name: Sign container image
        run: |
          echo "Signing container image with cosign"
          cosign sign --yes ${{ steps.meta.outputs.tags }}@${{ steps.build.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: 1

  # Security scan of built images
  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build-images
    
    strategy:
      matrix:
        service: [discord-bot, api-server, web-dashboard]
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.ref_name }}
          format: sarif
          output: trivy-results-${{ matrix.service }}.sarif
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results-${{ matrix.service }}.sarif

  # Generate release artifacts
  generate-artifacts:
    name: Generate Release Artifacts
    runs-on: ubuntu-latest
    needs: pre-release-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for changelog
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build applications
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Generate changelog
        run: |
          npx conventional-changelog-cli -p angular -i CHANGELOG.md -s
          echo "## Release Notes" > release-notes.md
          echo "" >> release-notes.md
          echo "### What's Changed" >> release-notes.md
          git log --oneline $(git describe --tags --abbrev=0)..HEAD >> release-notes.md
      
      - name: Create deployment manifests
        run: |
          mkdir -p deployment/
          
          # Kubernetes manifests
          envsubst < k8s/discord-bot.yaml > deployment/discord-bot.yaml
          envsubst < k8s/api-server.yaml > deployment/api-server.yaml  
          envsubst < k8s/web-dashboard.yaml > deployment/web-dashboard.yaml
          
          # Docker Compose
          envsubst < docker-compose.prod.yml > deployment/docker-compose.yml
        env:
          RELEASE_VERSION: ${{ github.ref_name }}
          IMAGE_REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
      
      - name: Create source archive
        run: |
          git archive --format=tar.gz --prefix=aicompare-${{ github.ref_name }}/ \
            HEAD > aicompare-${{ github.ref_name }}-source.tar.gz
      
      - name: Create binary archives
        run: |
          # Package built applications
          tar -czf aicompare-${{ github.ref_name }}-linux-x64.tar.gz \
            -C packages/discord-bot/dist . \
            -C ../../../packages/api-server/dist . \
            -C ../../../packages/web-dashboard/.next .
      
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            aicompare-*.tar.gz
            deployment/
            release-notes.md
            CHANGELOG.md

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan, generate-artifacts]
    environment: 
      name: production
      url: https://aicompare.app
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download deployment artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name aicompare-production
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment/
          kubectl rollout status deployment/discord-bot
          kubectl rollout status deployment/api-server
          kubectl rollout status deployment/web-dashboard
      
      - name: Run post-deployment tests
        run: |
          echo "Running production smoke tests..."
          curl -f https://api.aicompare.app/health || exit 1
          curl -f https://aicompare.app || exit 1
      
      - name: Update deployment status
        run: |
          gh api repos/${{ github.repository }}/deployments \
            --method POST \
            --field ref='${{ github.ref }}' \
            --field environment=production \
            --field description='Production deployment'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Database migrations (production)
  migrate-production:
    name: Run Production Migrations
    runs-on: ubuntu-latest
    needs: deploy-production
    environment: production
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          NODE_ENV: production
      
      - name: Verify migrations
        run: npm run db:validate
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

  # Performance testing on production
  production-performance-tests:
    name: Production Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run performance tests
        run: |
          npx artillery run tests/load/production-load-test.yml \
            --target https://api.aicompare.app \
            --output production-perf-results.json
      
      - name: Analyze results
        run: |
          npx artillery report production-perf-results.json \
            --output production-perf-report.html
      
      - name: Check performance thresholds
        run: |
          node scripts/check-performance-thresholds.js production-perf-results.json
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: production-performance-results
          path: |
            production-perf-results.json
            production-perf-report.html

  # Notify stakeholders
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production, migrate-production, production-performance-tests]
    if: always() && github.event_name == 'release'
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 **Production Deployment Complete**
            
            **Release:** ${{ github.ref_name }}
            **Repository:** ${{ github.repository }}
            **Status:** ${{ needs.deploy-production.result }}
            **Performance Tests:** ${{ needs.production-performance-tests.result }}
            
            **Services:**
            • Discord Bot: ✅ Deployed
            • API Server: ✅ Deployed  
            • Web Dashboard: ✅ Deployed
            
            **Links:**
            • [Web Dashboard](https://aicompare.app)
            • [API Health](https://api.aicompare.app/health)
            • [Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Create deployment summary
        run: |
          echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Services Status" >> $GITHUB_STEP_SUMMARY
          echo "- Discord Bot: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- API Server: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Web Dashboard: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Post-Deployment Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Database Migrations: ${{ needs.migrate-production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.production-performance-tests.result }}" >> $GITHUB_STEP_SUMMARY

  # Rollback capability
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    environment: production
    if: failure() && github.event_name == 'release'
    
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name aicompare-production
      
      - name: Rollback deployments
        run: |
          kubectl rollout undo deployment/discord-bot
          kubectl rollout undo deployment/api-server
          kubectl rollout undo deployment/web-dashboard
          
          # Wait for rollback to complete
          kubectl rollout status deployment/discord-bot
          kubectl rollout status deployment/api-server
          kubectl rollout status deployment/web-dashboard
      
      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          curl -f https://api.aicompare.app/health || exit 1
          curl -f https://aicompare.app || exit 1
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#deployments'
          text: |
            ⚠️ **Production Rollback Executed**
            
            Release ${{ github.ref_name }} deployment failed and has been rolled back.
            Please investigate the deployment logs and fix issues before retrying.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}