version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aicompare-postgres
    environment:
      POSTGRES_DB: aicompare
      POSTGRES_USER: aicompare_user
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aicompare-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aicompare_user -d aicompare"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: aicompare-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infra/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - aicompare-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Discord Bot Service
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: aicompare-bot
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://aicompare_user:dev_password_123@postgres:5432/aicompare
      REDIS_URL: redis://redis:6379
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      COHERE_API_KEY: ${COHERE_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      WEB_DASHBOARD_URL: http://localhost:3000
      API_PORT: 3001
    ports:
      - "3001:3001"
    volumes:
      - ./bot:/app
      - /app/node_modules
      - ./shared:/app/shared:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aicompare-network
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./bot/src
          target: /app/src
        - action: rebuild
          path: ./bot/package.json

  # Web Dashboard
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: aicompare-web
    environment:
      NODE_ENV: development
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      DATABASE_URL: postgresql://aicompare_user:dev_password_123@postgres:5432/aicompare
    ports:
      - "3000:3000"
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next
      - ./shared:/app/shared:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aicompare-network
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./web/src
          target: /app/src
        - action: rebuild
          path: ./web/package.json

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: aicompare-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aicompare.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - aicompare-network
    profiles:
      - tools

  # Redis Commander for Redis management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: aicompare-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - aicompare-network
    profiles:
      - tools

  # Nginx reverse proxy (production-like setup)
  nginx:
    image: nginx:alpine
    container_name: aicompare-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infra/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - bot
    networks:
      - aicompare-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  aicompare-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16